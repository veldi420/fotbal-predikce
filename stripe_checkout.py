# stripe_checkout.py
# ------------------
import os
import stripe
import streamlit as st

# ====== Nastaven√≠ kl√≠ƒç≈Ø z ENV ======
STRIPE_SECRET_KEY = os.getenv("STRIPE_SECRET_KEY", "").strip()
STRIPE_PRICE_ID   = os.getenv("STRIPE_PRICE_ID", "").strip()
PUBLIC_URL        = os.getenv("PUBLIC_URL", "").strip()  # nap≈ô. https://fotbal-predikce-3.onrender.com

if STRIPE_SECRET_KEY:
    stripe.api_key = STRIPE_SECRET_KEY

def _require_stripe_ready() -> bool:
    if not STRIPE_SECRET_KEY or not STRIPE_PRICE_ID:
        st.error("Stripe nen√≠ nakonfigurov√°n. Na Renderu nastav **STRIPE_SECRET_KEY** a **STRIPE_PRICE_ID** v Environment Variables.")
        return False
    return True

def has_active_subscription(email: str) -> bool:
    """Zkontroluje aktivn√≠/trial p≈ôedplatn√© podle e-mailu (sandbox i live)."""
    if not _require_stripe_ready() or not email:
        return False
    try:
        customers = stripe.Customer.list(email=email, limit=3).data
        for cust in customers:
            subs = stripe.Subscription.list(customer=cust.id, status="all", limit=5).data
            for s in subs:
                if s.status in ("active", "trialing"):
                    return True
        return False
    except stripe.error.AuthenticationError:
        st.error("Chybn√Ω Stripe API key (pou≈æij **test** kl√≠ƒç sk_test_... v Sandboxu).")
        return False
    except Exception as e:
        st.warning(f"Stripe kontrola selhala: {e}")
        return False

def paywall_ui(render_protected):
    """Jednoduch√Ω paywall: pokud nen√≠ aktivn√≠ p≈ôedplatn√©, nab√≠dne Checkout."""
    st.markdown("### üîí P≈ôedplatn√©")
    st.caption("Pro pln√Ω p≈ô√≠stup je pot≈ôeba aktivn√≠ p≈ôedplatn√© (399 Kƒç / mƒõs√≠c).")

    # e-mail ‚Äì pou≈æijeme ho pro p≈ôi≈ôazen√≠ p≈ôedplatn√©ho
    email = st.text_input("V√°≈° e-mail", placeholder="nap≈ô. jan.novak@email.cz")

    # kdy≈æ se vr√°t√≠me ze Stripe Checkout (success=1), zobraz obsah
    qp = st.query_params
    just_success = qp.get("success", ["0"])[0] == "1"

    subscribed = has_active_subscription(email) if email else False
    if subscribed:
        st.success("‚úÖ M√°te aktivn√≠ p≈ôedplatn√©. Dƒõkujeme!")
        render_protected()
        return

    if just_success and email:
        # po n√°vratu ze Stripe chvilku trv√°, ne≈æ Stripe ozn√°m√≠ subskripci ‚Üí zkus√≠me naj√≠t
        if has_active_subscription(email):
            st.success("‚úÖ Platba potvrzena. P≈ôedplatn√© je aktivn√≠.")
            render_protected()
            return
        st.info("Platba probƒõhla, aktivace m≈Ø≈æe trvat p√°r sekund. Zkuste to za chv√≠li znovu.")

    st.warning("Nem√°te aktivn√≠ p≈ôedplatn√©.")

    # tlaƒç√≠tko do Stripe Checkout
    if st.button("üí≥ P≈ôej√≠t na platbu (Stripe)"):
        if not _require_stripe_ready():
            st.stop()
        if not email:
            st.error("Zadejte pros√≠m e-mail.")
            st.stop()

        success_url = (PUBLIC_URL or "https://example.com") + "?success=1"
        cancel_url  = (PUBLIC_URL or "https://example.com") + "?canceled=1"

        try:
            session = stripe.checkout.Session.create(
                mode="subscription",
                payment_method_types=["card"],
                line_items=[{"price": STRIPE_PRICE_ID, "quantity": 1}],
                customer_email=email,
                success_url=success_url,
                cancel_url=cancel_url,
                allow_promotion_codes=True,
            )
            st.link_button("üîó Otev≈ô√≠t Stripe Checkout", session.url, use_container_width=True, type="primary")
            st.caption("Pokud se odkaz neotev≈ôe automaticky, klepnƒõte na tlaƒç√≠tko v√Ω≈°e.")
        except Exception as e:
            st.error(f"Vytvo≈ôen√≠ Checkout session selhalo: {e}")
